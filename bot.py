import logging
import os
import sys
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Message, ReplyKeyboardMarkup, InputMediaPhoto, InputMediaDocument, BotCommand, BotCommandScopeChat
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    JobQueue,
)
import html
from g_sheets import add_feedback, record_action, set_priority_and_sla, get_open_tickets_for_sla_check, mark_sla_notification_sent
from database import (
    initialize_db, get_all_users, get_user_fio, set_user_fio, 
    get_or_create_user, delete_user, set_user_username, get_user_username,
    set_topic_id, get_all_topic_ids, delete_all_topics
)
from logger import logger

# –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é Python –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
log = logger.get_logger('main')
log.info(f"–ó–∞–ø—É—Å–∫ –Ω–∞ Python –≤–µ—Ä—Å–∏–∏: {sys.version}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME")
ADMIN_USER_IDS = [int(admin_id) for admin_id in os.getenv("ADMIN_USER_IDS", "").split(',') if admin_id]
SLA_NOTIFICATION_USER_IDS = [int(user_id) for user_id in os.getenv("SLA_NOTIFICATION_USER_IDS", "").split(',') if user_id]

ADMIN_CHAT_ID_STR = os.getenv("ADMIN_CHAT_ID")
ADMIN_CHAT_ID = None
if ADMIN_CHAT_ID_STR:
    try:
        ADMIN_CHAT_ID = int(ADMIN_CHAT_ID_STR)
        log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω ADMIN_CHAT_ID: {ADMIN_CHAT_ID}")
    except ValueError:
        log.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π ADMIN_CHAT_ID –≤ —Ñ–∞–π–ª–µ .env: '{ADMIN_CHAT_ID_STR}'. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
else:
    log.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ .env.")

TOPIC_NAMES = {
    "dashboard": "üïπÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    "l1_requests": "–õ–∏–Ω–∏—è 1",
    "l2_support": "–õ–∏–Ω–∏—è 2",
    "l3_billing": "–õ–∏–Ω–∏—è 3",
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
# –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥
CHOOSING, PLATFORM, FEEDBACK, AWAITING_PHOTO = range(4)
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
REG_AWAITING_FIO = range(4, 5)
# –î–∏–∞–ª–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏
CHOOSING_DIGEST_CONTENT, AWAITING_DIGEST_TEXT, AWAITING_DIGEST_DOCUMENT, CONFIRM_DIGEST = range(5, 9)
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ–Ω—é
persistent_keyboard = [["üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"]]
persistent_markup = ReplyKeyboardMarkup(persistent_keyboard, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
reply_keyboard = [
    [InlineKeyboardButton("üêõ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥", callback_data="bug")],
    [InlineKeyboardButton("üí° –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="feature")],
    [InlineKeyboardButton("üöß –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º", callback_data="access_issue")],
    [InlineKeyboardButton("üìû –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="consultation")],
]
markup = InlineKeyboardMarkup(reply_keyboard)

# –°–ø–∏—Å–æ–∫ –ø–ª–æ—â–∞–¥–æ–∫
PLATFORMS = [
    "–£–õ–õ–ß",
    "–ë–ù–ö–ú",
    "–Æ–ö–ú",
    "–ê–Ω–∞—Å—Ç–∞—Å—å–µ–≤–∫–∞",
    "–î–∂–µ–ª—é–º–∫–µ–Ω",
    "–°–º–∏–¥–æ–≤–∏—á",
    "–ö–∏—Ä–≥–∞",
    "–í–µ—Ä–Ω–µ–±–µ–ª–æ–µ",
    "–ù–æ–≤–æ–±—É—Ä–µ–π—Å–∫–æ–µ",
    "–ó–∞—Ä–µ—á–Ω–æ–µ",
    "–£—Å—Ç—å-–ü–µ—Ä—Ä–∞",
    "–ö–°6-–•–∞–±–∞—Ä–æ–≤—Å–∫–∞—è",
    "–ö–°-–¢–æ—Å–Ω–µ–Ω—Å–∫–∞—è",
    "–í–°–ö(–í–æ–ª—Ö–æ–≤-–°–µ–≥–µ–∂–∞)",
    "–£–ö–ü–ì-45"
]

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–æ—â–∞–¥–∫–∏
def get_platform_keyboard():
    keyboard = []
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    for i in range(0, len(PLATFORMS), 2):
        row = []
        row.append(InlineKeyboardButton(PLATFORMS[i], callback_data=f"platform_{PLATFORMS[i]}"))
        if i + 1 < len(PLATFORMS):
            row.append(InlineKeyboardButton(PLATFORMS[i + 1], callback_data=f"platform_{PLATFORMS[i + 1]}"))
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.message.from_user
    logger.set_context(update)
    log.info(f"–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")

    fio = await get_or_create_user(user.id) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –æ–¥–∏–Ω –≤—ã–∑–æ–≤
    log.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {fio}")

    if fio:
        logger.set_context(update)
        log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞—Ç–∏–ª—Å—è –∫ –±–æ—Ç—É")
        context.user_data["fio"] = fio
        await update.message.reply_text(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {fio}!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ' –Ω–∏–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /new_ticket.",
            reply_markup=persistent_markup,
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç!\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ METASFERA Welding.\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–ª–æ–∂–Ω–æ—Å—Ç—è—Ö —Å –¥–æ—Å—Ç—É–ø–æ–º. "
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤–∞—à–µ –§–ò–û.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        )
        logger.set_context(update)
        log.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        return REG_AWAITING_FIO

async def register_fio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –§–ò–û –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user = update.message.from_user
        fio = update.message.text
        await set_user_fio(user.id, fio)
        if user.username:
            await set_user_username(user.id, user.username)
            context.user_data["username"] = user.username
        context.user_data["fio"] = fio

        await update.message.reply_text(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ, {fio}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ú–ï–ù–Æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ', –ª–∏–±–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /new_ticket",
            reply_markup=persistent_markup,
        )
        logger.set_context(update)
        log.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è")
    except Exception as e:
        logger.set_context(update) 
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
    return ConversationHandler.END

async def start_new_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –ø–æ –∫–Ω–æ–ø–∫–µ '–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ' –∏–ª–∏ –∫–æ–º–∞–Ω–¥–µ /new_ticket."""
    user_id = update.message.from_user.id
    fio = await get_user_fio(user_id)
    username = update.message.from_user.username
    logger.set_context(update)
    log.info(f"–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if username:
        await set_user_username(user_id, username)
        context.user_data["username"] = username
        log.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
    
    # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –∏ —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –±–µ–∑ /start
    if not fio:
        await update.message.reply_text(
            "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start."
        )
        logger.set_context(update)
        log.warning(f"–ù–µ–∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å")
        return ConversationHandler.END # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    context.user_data['fio'] = fio
    
    await update.message.reply_text(
        "üí¨ –ß–µ–º –º–æ–∂–µ–º –ø–æ–º–æ—á—å? –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=markup
    )
    return CHOOSING

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–ª–æ—â–∞–¥–∫—É."""
    query = update.callback_query
    await query.answer()
    choice = query.data
    logger.set_context(update)
    log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: {choice}")

    if choice == 'bug':
        user_choice_text = "–ë–∞–≥"
    elif choice == 'feature':
        user_choice_text = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
    elif choice == 'access_issue':
        user_choice_text = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º"
    elif choice == 'consultation':
        user_choice_text = "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
    else:
        user_choice_text = "–û–±—Ä–∞—â–µ–Ω–∏–µ"
    context.user_data["choice"] = user_choice_text

    # –§–ò–û —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–ª–æ—â–∞–¥–∫—É
    await query.edit_message_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É:",
        reply_markup=get_platform_keyboard()
    )
    
    return PLATFORM

async def handle_platform_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–ª–æ—â–∞–¥–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏ –∏–∑ callback_data
    platform = query.data.replace("platform_", "")
    context.user_data["platform"] = platform
    logger.set_context(update)
    log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–ª–æ—â–∞–¥–∫—É: {platform}")
    
    choice = context.user_data["choice"]
    if choice == "–ë–∞–≥":
        feedback_type_text = "–æ–ø–∏—à–∏—Ç–µ –±–∞–≥"
    elif choice == "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ":
        feedback_type_text = "–æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
    elif choice == "–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º":
        feedback_type_text = "–æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–Ω–µ –º–æ–≥—É –∑–∞–π—Ç–∏', '—Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ')"
    elif choice == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
        feedback_type_text = "–æ–ø–∏—à–∏—Ç–µ, –ø–æ –∫–∞–∫–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤–∞–º –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
    else:
        feedback_type_text = "–æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å"

    await query.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞: {platform}\n\n"
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ {feedback_type_text}."
    )
    return FEEDBACK

async def get_feedback_and_ask_for_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ."""
    context.user_data["feedback_text"] = update.message.text
    context.user_data["photo_ids"] = [] # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è ID —Ñ–æ—Ç–æ
    context.user_data["albums"] = {} # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
    logger.set_context(update)
    log.info("–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–±–µ–∑ —Ñ–æ—Ç–æ)", callback_data="skip_photo")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.\n"
        "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —è –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è.\n"
        "–ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        reply_markup=reply_markup
    )
    
    return AWAITING_PHOTO

async def process_album(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ."""
    job = context.job
    chat_id, media_group_id, user_id = job.data
    
    # –î–æ—Å—Ç–∞–µ–º user_data –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = context.application.user_data.get(user_id, {})
    
    if 'albums' not in user_data or media_group_id not in user_data['albums']:
        return # –ì—Ä—É–ø–ø–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
    photos = user_data['albums'][media_group_id]['photos']
    log.info(f"–ù–∞–π–¥–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º–µ")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
    if "photo_ids" not in user_data:
        user_data["photo_ids"] = []
    user_data["photo_ids"].extend(photos)
    log.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–ø–∏—Å–∫—É (–≤—Å–µ–≥–æ: {len(user_data['photo_ids'])})")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É –∞–ª—å–±–æ–º—É
    del user_data['albums'][media_group_id]

    keyboard = [[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ, –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ –Ω–µ—Ç", callback_data="finish_photos")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=chat_id,
        text=f"–ê–ª—å–±–æ–º –∏–∑ {len(photos)} —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω (–≤—Å–µ–≥–æ: {len(user_data['photo_ids'])}). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=reply_markup
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ, –≥—Ä—É–ø–ø–∏—Ä—É—è –∏—Ö –≤ –∞–ª—å–±–æ–º—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    message = update.message

    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–∏—à–ª–æ –∫–∞–∫ —á–∞—Å—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã (–∞–ª—å–±–æ–º–∞)
    if message.media_group_id:

        media_group_id = message.media_group_id
        photo_id = message.photo[-1].file_id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–ª—å–±–æ–º–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'albums' not in context.user_data:
            context.user_data['albums'] = {}
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º–µ, —Å–æ–∑–¥–∞–µ–º –¥–ª—è –Ω–µ–≥–æ –∑–∞–ø–∏—Å—å
        if media_group_id not in context.user_data['albums']:
            context.user_data['albums'][media_group_id] = {
                'photos': [],
                'job_name': f"album_{media_group_id}"
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º
        context.user_data['albums'][media_group_id]['photos'].append(photo_id)
        
        job_name = context.user_data['albums'][media_group_id]['job_name']
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª, —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –æ—Ç—Å—á–µ—Ç
        # –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞
        existing_jobs = context.job_queue.get_jobs_by_name(job_name)
        for job in existing_jobs:
            job.schedule_removal()
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É. –ï—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –ø—Ä–∏–¥–µ—Ç –µ—â–µ —Ñ–æ—Ç–æ,
        # —Ç–∞–π–º–µ—Ä —Å–±—Ä–æ—Å–∏—Ç—Å—è. –ï—Å–ª–∏ –Ω–µ—Ç - –≤—ã–∑–æ–≤–µ—Ç—Å—è process_album.
        context.job_queue.run_once(
            process_album, 
            1, 
            data=(message.chat_id, media_group_id, message.from_user.id), 
            name=job_name
        )

    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–∏—à–ª–æ –æ–¥–Ω–æ (–Ω–µ –≤ –∞–ª—å–±–æ–º–µ)
    else:
        photo_file_id = message.photo[-1].file_id
        if "photo_ids" not in context.user_data:
            context.user_data["photo_ids"] = []
        context.user_data["photo_ids"].append(photo_file_id)

        keyboard = [[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ, –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ –Ω–µ—Ç", callback_data="finish_photos")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await message.reply_text(
            f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ (–≤—Å–µ–≥–æ: {len(context.user_data['photo_ids'])}). –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=reply_markup
        )
    return AWAITING_PHOTO # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

async def finish_photos_and_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()
    logger.set_context(update)
    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ")
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º final_save, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑—å–º–µ—Ç —Ñ–æ—Ç–æ –∏–∑ user_data
    return await final_save(update, context)

async def final_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–µ—Ç —Ç–∏–∫–µ—Ç –≤ –≤–∏–¥–µ —Ç–æ–ø–∏–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    user_data = context.user_data
    user = update.callback_query.from_user if update.callback_query else update.message.from_user
    logger.set_context(update)
    log.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    feedback_type = user_data["choice"]
    fio = user_data["fio"]
    platform = user_data["platform"]
    message_text = user_data["feedback_text"]
    photo_ids = user_data.get("photo_ids", [])
    username = user.username or user_data.get("username")
    if username:
        await set_user_username(user.id, username)
    else:
        username = await get_user_username(user.id)

    try:
        # Integration Point: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets –∏ –ø–æ–ª—É—á–∞–µ–º ID
        first_photo_id = photo_ids[0] if photo_ids else ""
        new_entry_id = await add_feedback(user.id, feedback_type, fio, username, platform, message_text, first_photo_id)
        
        if new_entry_id is not None:
            entry_id_str = str(new_entry_id)
            reply_text = f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{html.escape(entry_id_str)} –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ."
            
            # Integration Point: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SLA
            if feedback_type == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
                await set_priority_and_sla(entry_id_str, "–°—Ä–µ–¥–Ω–∏–π")
            
            # --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å —Ç–æ–ø–∏–∫–∞–º–∏ ---
            if ADMIN_CHAT_ID:
                try:
                    # 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫ –¥–ª—è —Ç–∏–∫–µ—Ç–∞
                    topic_title = f"[New] Ticket #{entry_id_str} from @{username or fio}"
                    ticket_topic = await context.bot.create_forum_topic(chat_id=ADMIN_CHAT_ID, name=topic_title)
                    ticket_topic_id = ticket_topic.message_thread_id
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å user_id -> ticket_topic_id
                    context.bot_data.setdefault('user_ticket_topics', {})[user.id] = ticket_topic_id
                    context.bot_data.setdefault('topic_ticket_info', {})[ticket_topic_id] = {'user_id': user.id, 'entry_id': entry_id_str, 'fio': fio, 'username': username, 'status': 'new', 'assignee': None, 'topic_id': ticket_topic_id, 'feedback_type': feedback_type}


                    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                    admin_message_lines = [
                        f"üö® <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{entry_id_str}</b> üö®", "---",
                        f"üë§ <b>–û—Ç:</b> {html.escape(fio)}" + (f" (@{html.escape(username)})" if username else ""),
                        f"üîß <b>–¢–∏–ø:</b> {html.escape(feedback_type)}", f"üìç <b>–ü–ª–æ—â–∞–¥–∫–∞:</b> {html.escape(platform)}", "---",
                        "<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>", f"{html.escape(message_text)}"
                    ]
                    admin_message = "\n".join(admin_message_lines)
                    
                    priority_keyboard = [
                        InlineKeyboardButton("–ö—Ä–∏—Ç–∏—á–Ω—ã–π", callback_data=f"priority_–ö—Ä–∏—Ç–∏—á–Ω—ã–π_{entry_id_str}_{user.id}_{ticket_topic_id}"),
                        InlineKeyboardButton("–í—ã—Å–æ–∫–∏–π", callback_data=f"priority_–í—ã—Å–æ–∫–∏–π_{entry_id_str}_{user.id}_{ticket_topic_id}")
                    ]
                    priority_keyboard2 = [
                        InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π", callback_data=f"priority_–°—Ä–µ–¥–Ω–∏–π_{entry_id_str}_{user.id}_{ticket_topic_id}"),
                        InlineKeyboardButton("–ù–∏–∑–∫–∏–π", callback_data=f"priority_–ù–∏–∑–∫–∏–π_{entry_id_str}_{user.id}_{ticket_topic_id}")
                    ]
                    admin_buttons_markup = InlineKeyboardMarkup([priority_keyboard, priority_keyboard2])
                    
                    if photo_ids:
                        media = [InputMediaPhoto(media=pid) for pid in photo_ids]
                        if len(media) > 1:
                            await context.bot.send_media_group(chat_id=ADMIN_CHAT_ID, message_thread_id=ticket_topic_id, media=media)
                        else:
                            await context.bot.send_photo(chat_id=ADMIN_CHAT_ID, message_thread_id=ticket_topic_id, photo=photo_ids[0])

                    await context.bot.send_message(
                        chat_id=ADMIN_CHAT_ID, message_thread_id=ticket_topic_id,
                        text=admin_message, parse_mode='HTML', reply_markup=admin_buttons_markup
                    )

                    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ L1 (–ë–ï–ó –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É")
                    l1_topic_id = context.bot_data.get("l1_requests_topic_id")
                    if l1_topic_id:
                        log.info(f"–ù–∞–π–¥–µ–Ω ID —Ç–æ–ø–∏–∫–∞ L1: {l1_topic_id}. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id_str}...")
                        try:
                            chat_link = f"https://t.me/c/{str(ADMIN_CHAT_ID).replace('-100', '')}"
                            ticket_url = f"{chat_link}/{ticket_topic_id}"
                            l1_summary = (f"üÜï <b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{entry_id_str}</b> –æ—Ç @{username or fio}\n"
                                          f"<b>–¢–∏–ø:</b> {feedback_type}\n"
                                          f"<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> <i>–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</i>\n"
                                          f"<a href='{ticket_url}'>‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∏–∫–µ—Ç—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞</a>")
                            
                            l1_message = await context.bot.send_message(
                                chat_id=ADMIN_CHAT_ID, message_thread_id=l1_topic_id,
                                text=l1_summary, parse_mode='HTML', disable_web_page_preview=True
                            )
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ L1 –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                            context.bot_data.setdefault('l1_messages', {})[entry_id_str] = l1_message.message_id
                            log.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id_str} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ L1 (message_id: {l1_message.message_id}).")
                        except Exception as e:
                            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫ L1 ({l1_topic_id}) –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id_str}: {e}", exc_info=True)
                    else:
                        log.warning("–ù–µ –Ω–∞–π–¥–µ–Ω 'l1_requests_topic_id' –≤ bot_data. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ L1 –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

                    # 4. –û–±–Ω–æ–≤–ª—è–µ–º Dashboard
                    await update_dashboard(context.application)

                except Exception as e:
                    log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–æ–≤ –ø–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ: {e}", exc_info=True)
                    reply_text += "\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º–∏ –Ω–∞–ø—Ä—è–º—É—é."


        else:
            reply_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: add_feedback –≤–µ—Ä–Ω—É–ª None")
            
    except Exception as e:         
        reply_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        log.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}", exc_info=True)

    # –û—Ç–≤–µ—á–∞–µ–º –ª–∏–±–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–∏–±–æ –Ω–∞ –∫–æ–ª–±—ç–∫
    if update.callback_query:
        await update.callback_query.edit_message_text(reply_text)
    else:
        await update.message.reply_text(reply_text)
    log.info(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    user_data.clear()
    
    return ConversationHandler.END

async def skip_photo_and_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —à–∞–≥ —Å —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ."""
    logger.set_context(update)
    log.info("–ü—Ä–æ–ø—É—Å–∫ —à–∞–≥–∞ —Å —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è")
    await update.callback_query.answer()
    return await final_save(update, context)

async def take_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑—è—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∏–∑ —Ç–æ–ø–∏–∫–∞ L1."""
    query = update.callback_query
    await query.answer()
    
    admin_user = query.from_user
    admin_identifier = f"@{admin_user.username}" if admin_user.username else admin_user.full_name
    logger.set_context(update)
    log.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_identifier} –±–µ—Ä–µ—Ç –≤ —Ä–∞–±–æ—Ç—É —Ç–∏–∫–µ—Ç.")

    try:
        _, ticket_topic_id, entry_id, user_id_str = query.data.split('_')
        ticket_topic_id = int(ticket_topic_id)
        user_id = int(user_id_str)
    except (ValueError, IndexError) as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data –¥–ª—è 'take_ticket': {query.data}, {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
    ticket_info = context.bot_data.get('topic_ticket_info', {}).get(ticket_topic_id)
    if ticket_info:
        ticket_info['status'] = 'in_progress'
        ticket_info['assignee'] = admin_identifier
    else:
        log.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ {ticket_topic_id}")
        await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.", show_alert=True)
        return
        
    # 1. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ L1
    try:
        await query.message.delete()
        log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∏–∫–µ—Ç–µ #{entry_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ L1.")
    except Exception as e:
        log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ L1 –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id}: {e}")

    # 2. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–æ–ø–∏–∫ —Ç–∏–∫–µ—Ç–∞
    try:
        ticket_info = context.bot_data.get('topic_ticket_info', {}).get(ticket_topic_id, {})
        username = ticket_info.get('username', 'user')
        fio = ticket_info.get('fio', '')
        new_topic_name = f"[In Progress - {admin_identifier}] Ticket #{entry_id} from @{username or fio}"
        await context.bot.edit_forum_topic(chat_id=ADMIN_CHAT_ID, message_thread_id=ticket_topic_id, name=new_topic_name)
        log.info(f"–¢–æ–ø–∏–∫ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω.")
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ç–æ–ø–∏–∫ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id}: {e}")

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º Dashboard
    await update_dashboard(context.application)

    # 4. Integration Point: –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
    try:
        await record_action(entry_id, 'taken', datetime.now(), status=f"–í —Ä–∞–±–æ—Ç–µ —É {admin_identifier}")
        log.info(f"–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ #{entry_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Google Sheets.")
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Google Sheets –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id}: {e}")

    # 5. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚öôÔ∏è –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{entry_id} –±—ã–ª–æ –≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ({admin_identifier})."
        )
        log.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –≤–∑—è—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É.")
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –≤–∑—è—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É: {e}")

    # 6. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫
    transfer_keyboard = [
        InlineKeyboardButton("2Ô∏è‚É£ –ù–∞ 2 –ª–∏–Ω–∏—é", callback_data=f"transfer_l2_{entry_id}_{user_id}_{ticket_topic_id}"),
        InlineKeyboardButton("3Ô∏è‚É£ –ù–∞ 3 –ª–∏–Ω–∏—é", callback_data=f"transfer_l3_{entry_id}_{user_id}_{ticket_topic_id}")
    ]
    close_keyboard = [
        InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"close_ticket_{entry_id}_{user_id}_{ticket_topic_id}")
    ]
    control_markup = InlineKeyboardMarkup([transfer_keyboard, close_keyboard])
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        message_thread_id=ticket_topic_id,
        text="–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–º:",
        reply_markup=control_markup
    )

async def take_escalated_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑—è—Ç–∏–µ –≤ —Ä–∞–±–æ—Ç—É —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –∏–∑ —Ç–æ–ø–∏–∫–æ–≤ L2/L3."""
    query = update.callback_query
    await query.answer()
    
    admin_user = query.from_user
    admin_identifier = f"@{admin_user.username}" if admin_user.username else admin_user.full_name
    logger.set_context(update)

    try:
        _, _, ticket_topic_id_str, entry_id, user_id_str = query.data.split('_')
        ticket_topic_id = int(ticket_topic_id_str)
        user_id = int(user_id_str)
    except (ValueError, IndexError) as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data –¥–ª—è 'take_escalated_ticket': {query.data}, {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        return
    
    log.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_identifier} –±–µ—Ä–µ—Ç –≤ —Ä–∞–±–æ—Ç—É —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç #{entry_id}.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
    ticket_info = context.bot_data.get('topic_ticket_info', {}).get(ticket_topic_id)
    if ticket_info:
        ticket_info['status'] = 'in_progress'
        ticket_info['assignee'] = admin_identifier
    else:
        log.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ {ticket_topic_id}")
        await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ L2/L3
    try:
        await query.message.delete()
        log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–∏–∫–µ—Ç–µ #{entry_id} —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id}: {e}")

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–æ–ø–∏–∫
    try:
        username = ticket_info.get('username', 'user')
        fio = ticket_info.get('fio', '')
        new_topic_name = f"[In Progress - {admin_identifier}] Ticket #{entry_id} from @{username or fio}"
        await context.bot.edit_forum_topic(chat_id=ADMIN_CHAT_ID, message_thread_id=ticket_topic_id, name=new_topic_name)
        log.info(f"–¢–æ–ø–∏–∫ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω.")
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ç–æ–ø–∏–∫ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º Dashboard
    await update_dashboard(context.application)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚öôÔ∏è –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{entry_id} –±—ã–ª–æ –≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º L2/L3 ({admin_identifier})."
        )
        log.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –≤–∑—è—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É.")
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –≤–∑—è—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É: {e}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫
    transfer_keyboard = [
        InlineKeyboardButton("2Ô∏è‚É£ –ù–∞ 2 –ª–∏–Ω–∏—é", callback_data=f"transfer_l2_{entry_id}_{user_id}_{ticket_topic_id}"),
        InlineKeyboardButton("3Ô∏è‚É£ –ù–∞ 3 –ª–∏–Ω–∏—é", callback_data=f"transfer_l3_{entry_id}_{user_id}_{ticket_topic_id}")
    ]
    close_keyboard = [
        InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"close_ticket_{entry_id}_{user_id}_{ticket_topic_id}")
    ]
    control_markup = InlineKeyboardMarkup([transfer_keyboard, close_keyboard])
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        message_thread_id=ticket_topic_id,
        text="–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–º:",
        reply_markup=control_markup
    )

async def transfer_to_line(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Å–∫–∞–ª–∞—Ü–∏—é —Ç–∏–∫–µ—Ç–∞ –Ω–∞ L2 –∏–ª–∏ L3."""
    query = update.callback_query
    await query.answer()

    admin_user = query.from_user
    admin_identifier = f"@{admin_user.username}" if admin_user.username else admin_user.full_name
    logger.set_context(update)
    
    try:
        _, line, entry_id, user_id_str, ticket_topic_id_str = query.data.split('_')
        line_number = line[1:] # l2 -> 2
        user_id = int(user_id_str)
        ticket_topic_id = int(ticket_topic_id_str)
    except (ValueError, IndexError) as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data –¥–ª—è 'transfer_to_line': {query.data}, {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
        return

    log.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_identifier} —ç—Å–∫–∞–ª–∏—Ä—É–µ—Ç —Ç–∏–∫–µ—Ç #{entry_id} –Ω–∞ –ª–∏–Ω–∏—é {line_number}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
    ticket_info = context.bot_data.get('topic_ticket_info', {}).get(ticket_topic_id)
    if ticket_info:
        ticket_info['status'] = f"escalated_l{line_number}"
        # –ü—Ä–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ —É–±–∏—Ä–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ç–µ–ø–µ—Ä—å –≤ –æ–±—â–µ–π –æ—á–µ—Ä–µ–¥–∏
        ticket_info['assignee'] = None 
    else:
        log.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ {ticket_topic_id} –ø—Ä–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏")

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫ (L2/L3)
    target_topic_key = f"l{line_number}_support_topic_id"
    target_topic_id = context.bot_data.get(target_topic_key)
    
    if target_topic_id:
        try:
            chat_link = f"https://t.me/c/{str(ADMIN_CHAT_ID).replace('-100', '')}"
            ticket_url = f"https://t.me/c/{str(ADMIN_CHAT_ID).replace('-100', '')}/{ticket_topic_id}"

            ticket_info = context.bot_data.get('topic_ticket_info', {}).get(ticket_topic_id, {})
            username = ticket_info.get('username', 'user')
            fio = ticket_info.get('fio', '')

            escalation_summary = (
                f"‚ùóÔ∏è <b>–≠—Å–∫–∞–ª–∞—Ü–∏—è –Ω–∞ L{line_number}</b>\n"
                f"–¢–∏–∫–µ—Ç #{entry_id} –æ—Ç @{username or fio}\n"
                f"–ü–µ—Ä–µ–¥–∞–ª: {admin_identifier}\n"
                f"<a href='{ticket_url}'>‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∏–∫–µ—Ç—É</a>"
            )

            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                message_thread_id=target_topic_id,
                text=escalation_summary,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            log.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Å–∫–∞–ª–∞—Ü–∏–∏ —Ç–∏–∫–µ—Ç–∞ #{entry_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫ L{line_number}")
        except Exception as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –≤ —Ç–æ–ø–∏–∫ L{line_number}: {e}")
    else:
        log.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è L{line_number} ({target_topic_key})")

    # 2. –û–±–Ω–æ–≤–ª—è–µ–º Dashboard
    await update_dashboard(context.application)

    # 3. Integration Point: –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
    try:
        status = f"–ü–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ {line_number} –ª–∏–Ω–∏—é"
        await record_action(entry_id, f'transfer_l{line_number}', datetime.now(), status=status)
        log.info(f"–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ #{entry_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Google Sheets –Ω–∞ '{status}'.")
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Google Sheets –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id} –ø—Ä–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {e}")
        
    # 4. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚öôÔ∏è –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{entry_id} –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –ª–∏–Ω–∏—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ L{line_number} –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è."
        )
        log.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {e}")

    # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–∞–º–æ–º —Ç–∏–∫–µ—Ç–µ, –°–û–•–†–ê–ù–Ø–Ø –∫–Ω–æ–ø–∫–∏
    await query.edit_message_text(
        text=query.message.text + f"\n\n---\n‚û°Ô∏è <b>–¢–∏–∫–µ—Ç —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω –Ω–∞ L{line_number}</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_identifier}.",
        reply_markup=query.message.reply_markup # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    )

async def set_priority(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞, —á—Ç–æ —Ä–∞–≤–Ω–æ—Å–∏–ª—å–Ω–æ –≤–∑—è—Ç–∏—é —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É."""
    query = update.callback_query
    await query.answer()
    
    admin_user = query.from_user
    admin_identifier = f"@{admin_user.username}" if admin_user.username else admin_user.full_name
 
    try:
        _prefix, priority, entry_id, user_id_str, ticket_topic_id_str = query.data.split('_')
        user_id = int(user_id_str)
        ticket_topic_id = int(ticket_topic_id_str)
    except (ValueError, IndexError) as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data –¥–ª—è 'set_priority': {query.data}, {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        return
 
    log.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_identifier} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç '{priority}' –∏ –±–µ—Ä–µ—Ç –≤ —Ä–∞–±–æ—Ç—É —Ç–∏–∫–µ—Ç #{entry_id}")
 
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è—Ç –ª–∏ —Ç–∏–∫–µ—Ç —É–∂–µ –≤ —Ä–∞–±–æ—Ç—É
    ticket_info = context.bot_data.get('topic_ticket_info', {}).get(ticket_topic_id)
    if not ticket_info:
        log.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ {ticket_topic_id} –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.")
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É —Ç–∏–∫–µ—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", reply_markup=None)
        return
    
    if ticket_info.get('status') == 'in_progress':
        await query.answer(f"–¢–∏–∫–µ—Ç —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ —É {ticket_info.get('assignee', '–¥—Ä—É–≥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞')}.", show_alert=True)
        return
         
    # 2. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç–∞ –≤ bot_data
    ticket_info['status'] = 'in_progress'
    ticket_info['assignee'] = admin_identifier
    ticket_info['priority'] = priority
 
    # 3. –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —Å—Ç–∞—Ç—É—Å/–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π)
    try:
        await set_priority_and_sla(entry_id, priority)
        await record_action(entry_id, 'taken', datetime.now(), status=f"–í —Ä–∞–±–æ—Ç–µ —É {admin_identifier}")
        log.info(f"Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id}: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç={priority}, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π={admin_identifier}")
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Google Sheets –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id}: {e}")
        await query.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–ª–∞
 
    # 4. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–æ–ø–∏–∫
    try:
        username = ticket_info.get('username', 'user')
        fio = ticket_info.get('fio', '')
        new_topic_name = f"[In Progress - {admin_identifier}] Ticket #{entry_id} from @{username or fio}"
        await context.bot.edit_forum_topic(chat_id=ADMIN_CHAT_ID, message_thread_id=ticket_topic_id, name=new_topic_name)
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ç–æ–ø–∏–∫ {ticket_topic_id}: {e}")
 
    # 5. –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ L1
    l1_message_id = context.bot_data.get('l1_messages', {}).pop(entry_id, None)
    l1_topic_id = context.bot_data.get("l1_requests_topic_id")
    if l1_message_id and l1_topic_id:
        try:
            await context.bot.delete_message(chat_id=ADMIN_CHAT_ID, message_id=l1_message_id)
            log.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ L1.")
        except Exception as e:
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ L1 –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id}: {e}")
    else:
        log.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è L1 –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id}, –Ω–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å.")
 
    # 6. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚öôÔ∏è –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{entry_id} –±—ã–ª–æ –≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ({admin_identifier})."
        )
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
 
    # 7. –û–±–Ω–æ–≤–ª—è–µ–º Dashboard
    await update_dashboard(context.application)
 
    # 8. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ —Ç–∏–∫–µ—Ç–∞
    try:
        original_text = query.message.text
        new_text = original_text + f"\n\n---\n‚≠êÔ∏è <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {html.escape(priority)}\n" \
                        f"‚≠êÔ∏è <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {html.escape(admin_identifier)}\n"
        await query.edit_message_text(text=new_text, parse_mode='HTML', reply_markup=None)
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ —Ç–∏–∫–µ—Ç–∞ {ticket_topic_id}: {e}")
 
    # 9. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫
    transfer_keyboard = [
        InlineKeyboardButton("2Ô∏è‚É£ –ù–∞ 2 –ª–∏–Ω–∏—é", callback_data=f"transfer_l2_{entry_id}_{user_id}_{ticket_topic_id}"),
        InlineKeyboardButton("3Ô∏è‚É£ –ù–∞ 3 –ª–∏–Ω–∏—é", callback_data=f"transfer_l3_{entry_id}_{user_id}_{ticket_topic_id}")
    ]
    close_keyboard = [
        InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"close_ticket_{entry_id}_{user_id}_{ticket_topic_id}")
    ]
    control_markup = InlineKeyboardMarkup([transfer_keyboard, close_keyboard])
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        message_thread_id=ticket_topic_id,
        text="–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–º:",
        reply_markup=control_markup
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    logger.set_context(update)
    log.info("–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞")
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞

DIGEST_CHOOSE = [
    [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç ‚úç", callback_data="add_text")],
    [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ üì∑", callback_data="add_photo")],
    [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã üìÇ", callback_data="add_document")],
    [InlineKeyboardButton("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ üëÄ", callback_data="preview_and_send")]
]

async def start_digest(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
    user_id = update.message.from_user.id
    logger.set_context(update) 
     
    if user_id not in ADMIN_USER_IDS:
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–µ –∏–º–µ—è –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ.")
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞.")

    if 'digest_content_text' not in context.user_data:
        context.user_data['digest_content_text'] = []
    if 'digest_content_photos' not in context.user_data:
        context.user_data['digest_content_photos'] = []
    if 'digest_content_documents' not in context.user_data:
        context.user_data['digest_content_documents'] = []

    reply_markup = InlineKeyboardMarkup(DIGEST_CHOOSE)

    await update.message.reply_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥–∞–π–¥–∂–µ—Å—Ç?",
        reply_markup=reply_markup
    )
    return CHOOSING_DIGEST_CONTENT

async def choose_content_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–¥–º–∏–Ω–∞ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç/–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä """
    query = update.callback_query
    logger.set_context(update)
    if query is None:
        log.warning("choose_content_type –≤—ã–∑–≤–∞–Ω –±–µ–∑ CallbackQuery –æ–±—ä–µ–∫—Ç–∞.")
        return ConversationHandler.END
    
    await query.answer()

    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: %s", query.data)

    if query.data == "add_text":
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞.")
        return AWAITING_DIGEST_TEXT
    elif query.data == "add_photo":
        done_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ, –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ –Ω–µ—Ç", callback_data="finish_photos")]])
        await query.edit_message_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏–ª–∏ –∞–ª—å–±–æ–º. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=done_keyboard
        )
        return AWAITING_PHOTO    
    elif query.data == "add_document":
        done_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ, –±–æ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç", callback_data="finish_documents")]])
        await query.edit_message_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=done_keyboard
        )
        return AWAITING_DIGEST_DOCUMENT
    elif query.data == "preview_and_send":
        await query.edit_message_text("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞...")
        return await show_digest_preview(update, context)
    
    logger.set_context(update)
    
    log.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: %s –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", query.data )
    await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    return ConversationHandler.END

async def receive_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    logger.set_context(update)
    
    if update.message.text is None or update.message.text =="":
        log.warning("receive_text –≤—ã–∑–≤–∞–Ω –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è." )
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç.")
        return AWAITING_DIGEST_TEXT
    
    text_content = update.message.text
    context.user_data['digest_content_text'].append(text_content)
    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –≤ –¥–∞–π–¥–∂–µ—Å—Ç." )

    reply_markup = InlineKeyboardMarkup(DIGEST_CHOOSE)

    await update.message.reply_text(
        "–¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–∞–π–¥–∂–µ—Å—Ç. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë?",
        reply_markup=reply_markup
    )
    return CHOOSING_DIGEST_CONTENT

async def digest_media_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    query = update.callback_query
    logger.set_context(update)
    
    if query is None:
        log.warning("–í—ã–∑–≤–∞–Ω –±–µ–∑ CallbackQuery –æ–±—ä–µ–∫—Ç–∞." )
        return ConversationHandler.END

    await query.answer()

    raw_photo_ids = context.user_data.pop('photo_ids', [])
    if 'digest_content_photos' not in context.user_data:
        context.user_data['digest_content_photos'] = []

    if not raw_photo_ids:
        await query.edit_message_text("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë?")
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ –≤ –¥–∞–π–¥–∂–µ—Å—Ç.")
    else:
        for file_id_str in raw_photo_ids:
            context.user_data['digest_content_photos'].append({'file_id': file_id_str})
        
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª %d —Ñ–æ—Ç–æ –≤ –¥–∞–π–¥–∂–µ—Å—Ç.", len(raw_photo_ids) )
        await query.edit_message_text(f"{len(raw_photo_ids)} —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–∞–π–¥–∂–µ—Å—Ç. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë?")

    reply_markup = InlineKeyboardMarkup(DIGEST_CHOOSE)
    await context.bot.send_message(query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return CHOOSING_DIGEST_CONTENT

async def process_document_album(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ."""
    job = context.job
    chat_id, media_group_id, user_id = job.data
    user_data = context.application.user_data.get(user_id, {})
    
    if 'document_albums' not in user_data or media_group_id not in user_data['document_albums']:
        return    
    documents_in_album = user_data['document_albums'][media_group_id]['documents']
    
    if "document_ids" not in user_data:
        user_data["document_ids"] = []

    user_data["document_ids"].extend(documents_in_album)
    del user_data['document_albums'][media_group_id]
    log.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(documents_in_album)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –∞–ª—å–±–æ–º–∞ {media_group_id}")

    keyboard = [[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ, –±–æ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç", callback_data="finish_documents")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=chat_id,
        text=f"–ê–ª—å–±–æ–º –∏–∑ {len(documents_in_album)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω (–≤—Å–µ–≥–æ: {len(user_data['document_ids'])}). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=reply_markup
    )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –≥—Ä—É–ø–ø–∏—Ä—É—è –∏—Ö –≤ –∞–ª—å–±–æ–º—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    message = update.message

    if not message.document:
        log.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        await message.reply_text("–≠—Ç–æ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
        return AWAITING_DIGEST_DOCUMENT # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É

    file_id = message.document.file_id
    document_info = {'file_id': file_id}

    # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏—à–µ–ª –∫–∞–∫ —á–∞—Å—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã (–∞–ª—å–±–æ–º–∞)
    if message.media_group_id:
        media_group_id = message.media_group_id
        if 'document_albums' not in context.user_data:
            context.user_data['document_albums'] = {}
        if media_group_id not in context.user_data['document_albums']:
            context.user_data['document_albums'][media_group_id] = {
                'documents': [],
                'job_name': f"document_album_{media_group_id}"
            }
            log.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–ª—å–±–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ {media_group_id}")
            
        context.user_data['document_albums'][media_group_id]['documents'].append(document_info)
        job_name = context.user_data['document_albums'][media_group_id]['job_name']
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª, —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –æ—Ç—Å—á–µ—Ç
        existing_jobs = context.job_queue.get_jobs_by_name(job_name)
        for job in existing_jobs:
            job.schedule_removal()
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É. –ï—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –ø—Ä–∏–¥–µ—Ç –µ—â–µ –¥–æ–∫—É–º–µ–Ω—Ç, —Ç–∞–π–º–µ—Ä —Å–±—Ä–æ—Å–∏—Ç—Å—è. –ï—Å–ª–∏ –Ω–µ—Ç - –≤—ã–∑–æ–≤–µ—Ç—Å—è process_document_album.
        context.job_queue.run_once(
            process_document_album, 
            1, 
            data=(message.chat_id, media_group_id, message.from_user.id), 
            name=job_name
        )

    # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏—à–µ–ª –æ–¥–∏–Ω (–Ω–µ –≤ –∞–ª—å–±–æ–º–µ)
    else:
        log.info("–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ (–Ω–µ –≤ –∞–ª—å–±–æ–º–µ)")
        if "document_ids" not in context.user_data:
            context.user_data["document_ids"] = []
        context.user_data["document_ids"].append(document_info)
        log.info(f"–î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç. –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(context.user_data['document_ids'])}")

        keyboard = [[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ, –±–æ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç", callback_data="finish_documents")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await message.reply_text(
            f"–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω (–≤—Å–µ–≥–æ: {len(context.user_data['document_ids'])}). –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=reply_markup
        )
    return AWAITING_DIGEST_DOCUMENT

async def digest_document_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    query = update.callback_query
    logger.set_context(update)
    
    if query is None:
        log.warning("–í—ã–∑–≤–∞–Ω –±–µ–∑ CallbackQuery –æ–±—ä–µ–∫—Ç–∞." )
        return ConversationHandler.END

    await query.answer()

    documents_to_add = context.user_data.pop('document_ids', [])
    log.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(documents_to_add)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

    if 'digest_content_documents' not in context.user_data:
        context.user_data['digest_content_documents'] = []

    if not documents_to_add:
        await query.edit_message_text("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë?")
    else:
        context.user_data['digest_content_documents'].extend(documents_to_add)
        logger.set_context(update)
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª %d –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.", len(documents_to_add) )
        await query.edit_message_text(f"{len(documents_to_add)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–∞–π–¥–∂–µ—Å—Ç. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë?")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    reply_markup = InlineKeyboardMarkup(DIGEST_CHOOSE)
    await context.bot.send_message(query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return CHOOSING_DIGEST_CONTENT

async def show_digest_preview(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–π–¥–∂–µ—Å—Ç–∞, –≥—Ä—É–ø–ø–∏—Ä—É—è –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞. """
    text_items = context.user_data.get('digest_content_text', [])
    photo_items = context.user_data.get('digest_content_photos', [])
    document_items = context.user_data.get('digest_content_documents', [])

    admin_chat_id = update.effective_chat.id
    logger.set_context(update)
    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–π–¥–∂–µ—Å—Ç–∞." )

    if not text_items and not photo_items and not document_items:
        await context.bot.send_message(admin_chat_id, "–î–∞–π–¥–∂–µ—Å—Ç –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–µ–¥ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        reply_markup = InlineKeyboardMarkup(DIGEST_CHOOSE)
        await context.bot.send_message(admin_chat_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥–∞–π–¥–∂–µ—Å—Ç?", reply_markup=reply_markup)
        return CHOOSING_DIGEST_CONTENT

    await context.bot.send_message(admin_chat_id, "–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç:")

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    if text_items:
        full_text_content = "\n\n".join(text_items)
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        text_chunks = [full_text_content[i:i + 4096] for i in range(0, len(full_text_content), 4096)]
        log.info(f"–¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(text_chunks)} —á–∞—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        for chunk in text_chunks:
            try:
                await context.bot.send_message(admin_chat_id, chunk)
                await asyncio.sleep(0.01)
            except Exception as e:
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s", e )
                await context.bot.send_message(admin_chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞–º–∏
    if photo_items:
        current_media_group = []
        log.info(f"–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ {len(photo_items)} —Ñ–æ—Ç–æ")
        for i, photo_item in enumerate(photo_items):
            current_media_group.append(InputMediaPhoto(media=photo_item['file_id']))
            if (len(current_media_group) == 10) or (i == len(photo_items) - 1):
                try:
                    await context.bot.send_media_group(admin_chat_id, current_media_group, read_timeout=20, write_timeout=20)
                    await asyncio.sleep(0.01)
                except Exception as e:
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s", e )
                    await context.bot.send_message(admin_chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
                current_media_group = []

    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞–º–∏
    if document_items:
        current_document_group = []
        log.info(f"–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ {len(document_items)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        for i, doc_item in enumerate(document_items):
            current_document_group.append(InputMediaDocument(media=doc_item['file_id']))
            if len(current_document_group) == 10 or (i == len(document_items) - 1):
                try:
                    await context.bot.send_media_group(admin_chat_id, current_document_group, read_timeout=20, write_timeout=20)
                    await asyncio.sleep(0.01)
                except Exception as e:
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s", e )
                    await context.bot.send_message(admin_chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
                current_document_group = []

    all_users = await get_all_users()
    user_count = len([user_id for user_id in all_users if user_id not in ADMIN_USER_IDS])
    log.info(f"–î–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")],
        [InlineKeyboardButton("‚ùó –î–æ–ø–æ–ª–Ω–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç ‚ùó", callback_data="add_something_to_digest")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        admin_chat_id,
        f"–î–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É?",
        reply_markup=reply_markup
    )
    return CONFIRM_DIGEST

async def handle_broadcast_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    query = update.callback_query
    logger.set_context(update)
    log.info("handle_broadcast_conversation –≤—ã–∑–≤–∞–Ω. query.data: %s", query.data )

    if query is None:
        log.warning("handle_broadcast_confirmation –≤—ã–∑–≤–∞–Ω –±–µ–∑ CallbackQuery –æ–±—ä–µ–∫—Ç–∞." )
        return ConversationHandler.END

    await query.answer()

    if query.data == "confirm_broadcast":
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–∞")
        await query.edit_message_text("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–∞...")
        await send_final_digest(update, context)
        return ConversationHandler.END
    elif query.data == "add_something_to_digest":
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç")
        await query.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∫–æ–Ω—Ç–µ–Ω—Ç.")
        reply_markup = InlineKeyboardMarkup(DIGEST_CHOOSE)
        await context.bot.send_message(query.message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥–∞–π–¥–∂–µ—Å—Ç?", reply_markup=reply_markup)
        return CHOOSING_DIGEST_CONTENT
    elif query.data == "cancel_broadcast":
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–∞")
        await query.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await cancel_digest_creation(update, context)
        return ConversationHandler.END

async def send_final_digest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –≥—Ä—É–ø–ø–∏—Ä—É—è —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∞–ª—å–±–æ–º—ã."""

    text_items = context.user_data.get('digest_content_text', [])
    photo_items = context.user_data.get('digest_content_photos', [])
    document_items = context.user_data.get('digest_content_documents', [])

    admin_chat_id = update.effective_chat.id
    log.info(f"–ù–∞—á–∞–ª–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞. –¢–µ–∫—Å—Ç: {len(text_items)}, —Ñ–æ—Ç–æ: {len(photo_items)}, –¥–æ–∫—É–º–µ–Ω—Ç—ã: {len(document_items)}")

    if not text_items and not photo_items and not document_items:
        log.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –¥–∞–π–¥–∂–µ—Å—Ç." )
        await context.bot.send_message(admin_chat_id, "–î–∞–π–¥–∂–µ—Å—Ç –ø—É—Å—Ç. –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    all_users = await get_all_users()
    users_to_broadcast = [user_id for user_id in all_users if user_id not in ADMIN_USER_IDS]
    log.info(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {len(users_to_broadcast)}")

    success_count = 0
    fail_count = 0
    total_users_to_send = len(users_to_broadcast)

    await context.bot.send_message(admin_chat_id, f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è {total_users_to_send} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    for user_id in users_to_broadcast:
        user_send_successful = True
        try:
            # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            if text_items:
                full_text_content = "\n\n".join(text_items)
                text_chunks = [full_text_content[i:i + 4096] for i in range(0, len(full_text_content), 4096)]
                for chunk in text_chunks:
                    try:
                        await context.bot.send_message(user_id, chunk)
                        await asyncio.sleep(0.05)
                    except Exception as e:
                        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, e )
                        user_send_successful = False
                        break
                await asyncio.sleep(0.1)

            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞–º–∏
            if photo_items and user_send_successful: # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫ —Ä–∞–Ω–µ–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                current_media_group = []
                for i, photo_item in enumerate(photo_items):
                    current_media_group.append(InputMediaPhoto(media=photo_item['file_id']))
                    if (len(current_media_group) == 10) or (i == len(photo_items) - 1):
                        try:
                            await context.bot.send_media_group(user_id, current_media_group, read_timeout=20, write_timeout=20)
                            await asyncio.sleep(0.05)
                        except Exception as e:
                            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, e )
                            user_send_successful = False
                            break
                        current_media_group = []
                await asyncio.sleep(0.1)

            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞–º–∏
            if document_items and user_send_successful: 
                current_document_group = []
                for i, doc_item in enumerate(document_items):
                    current_document_group.append(InputMediaDocument(media=doc_item['file_id']))
                    if len(current_document_group) == 10 or (i == len(document_items) - 1):
                        try:
                            await context.bot.send_media_group(user_id, current_document_group, read_timeout=20, write_timeout=20)
                            await asyncio.sleep(0.05)
                        except Exception as e:
                            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, e )
                            user_send_successful = False
                            break
                        current_document_group = []
                await asyncio.sleep(0.1)

        except Exception as e:
            log.error("–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, e )
            user_send_successful = False
            
        if user_send_successful:
            success_count += 1
        else:
            fail_count += 1
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        await asyncio.sleep(0.2) # –û–±—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

    await context.bot.send_message(
        admin_chat_id,
        f"–†–∞—Å—Å—ã–ª–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {fail_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
    )
    log.info("–†–∞—Å—Å—ã–ª–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: %d, –û—à–∏–±–æ–∫: %d.", success_count, fail_count )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    if 'digest_content_text' in context.user_data:
        del context.user_data['digest_content_text']
    if 'digest_content_photos' in context.user_data:
        del context.user_data['digest_content_photos']
    if 'digest_content_documents' in context.user_data:
        del context.user_data['digest_content_documents']
    return ConversationHandler.END

async def cancel_digest_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏ –æ—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    if update.message:
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    logger.set_context(update)
    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞." )
    
    if 'digest_content_text' in context.user_data:
        del context.user_data['digest_content_text']
    if 'digest_content_photos' in context.user_data:
        del context.user_data['digest_content_photos']
    if 'digest_content_documents' in context.user_data:
        del context.user_data['digest_content_documents']
    return ConversationHandler.END

async def get_photo_by_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –ø–æ –µ–≥–æ file_id."""
    logger.set_context(update)
    user_id = update.message.from_user.id
    log.info(f"–ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ –ø–æ ID –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if user_id not in ADMIN_USER_IDS:
        log.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±–µ–∑ –ø—Ä–∞–≤ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ")
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        log.warning("–ù–µ —É–∫–∞–∑–∞–Ω ID —Ñ–æ—Ç–æ")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ñ–æ—Ç–æ. –ü—Ä–∏–º–µ—Ä: /get_photo <photo_id>")
        return

    photo_id = context.args[0]

    try:
        await context.bot.send_photo(chat_id=user_id, photo=photo_id)
        log.info(f"–§–æ—Ç–æ —Å ID {photo_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ ID {photo_id}: {e}" )
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")

async def unhandled_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∞–≤–ª—è—è –µ–≥–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–ø–∏–∫ —Ç–∏–∫–µ—Ç–∞."""
    user = update.message.from_user
    user_id = user.id
    logger.set_context(update)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
    active_ticket_topic_id = context.bot_data.get('user_ticket_topics', {}).get(user_id)
    
    if active_ticket_topic_id and ADMIN_CHAT_ID:
        log.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ {active_ticket_topic_id}")
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫
            await context.bot.forward_message(
                chat_id=ADMIN_CHAT_ID,
                from_chat_id=user_id,
                message_id=update.message.message_id,
                message_thread_id=active_ticket_topic_id
            )
            # await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.")
        except Exception as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Ç–æ–ø–∏–∫ {active_ticket_topic_id}: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
    log.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.")
    await update.message.reply_text(
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.",
        reply_markup=persistent_markup
    )

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."""
    await update.message.reply_text(
        "ü§∑‚Äç‚ôÇÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏–ª–∏ –∫–Ω–æ–ø–∫—É 'üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ'."
    )

async def close_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞, –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Ç–æ–ø–∏–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã."""
    query = update.callback_query
    await query.answer()

    admin_user = query.from_user
    admin_identifier = f"@{admin_user.username}" if admin_user.username else admin_user.full_name
    logger.set_context(update)

    try:
        _, _, entry_id, user_id_str, ticket_topic_id_str = query.data.split('_')
        user_id = int(user_id_str)
        ticket_topic_id = int(ticket_topic_id_str)
    except (ValueError, IndexError) as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data –¥–ª—è 'close_ticket': {query.data}, {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
        return

    log.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_identifier} –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç #{entry_id}")

    # 1. Integration Point: –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SLA
    try:
        await record_action(entry_id, 'closed', datetime.now(), status="–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
        log.info(f"–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ #{entry_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' –≤ Google Sheets.")
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Google Sheets –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id} –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
        await query.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Google Sheets: {e}")
        # –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ GS
        return

    # 2. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Dashboard
    dashboard_message_id = context.bot_data.get('dashboard_messages', {}).get(entry_id)
    if dashboard_message_id:
        try:
            await context.bot.delete_message(chat_id=ADMIN_CHAT_ID, message_id=dashboard_message_id)
            log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∏–∫–µ—Ç–µ #{entry_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞.")
        except Exception as e:
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ({dashboard_message_id}) –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id}: {e}")
    
    # 3. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{entry_id} –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ."
        )
        log.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")

    # 4. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ç–æ–ø–∏–∫
    try:
        original_topic_info = context.bot_data.get('topic_ticket_info', {}).get(ticket_topic_id)
        original_name = f"Ticket #{entry_id} from @{original_topic_info.get('username', 'user')}" # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è
        closed_topic_name = f"[Closed] {original_name}"
        
        await context.bot.edit_forum_topic(
            chat_id=ADMIN_CHAT_ID,
            message_thread_id=ticket_topic_id,
            name=closed_topic_name
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            message_thread_id=ticket_topic_id,
            text=f"---\n‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_identifier}."
        )
        await context.bot.close_forum_topic(chat_id=ADMIN_CHAT_ID, message_thread_id=ticket_topic_id)
        log.info(f"–¢–æ–ø–∏–∫ {ticket_topic_id} –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id} –∑–∞–∫—Ä—ã—Ç –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å/–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ø–∏–∫ {ticket_topic_id}: {e}")
        
    # 5. –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.bot_data.get('user_ticket_topics', {}).pop(user_id, None)
    context.bot_data.get('topic_ticket_info', {}).pop(ticket_topic_id, None)
    context.bot_data.get('dashboard_messages', {}).pop(entry_id, None)
    log.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id} –æ—á–∏—â–µ–Ω—ã.")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    await query.message.delete()

async def handle_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ç–æ–ø–∏–∫–∞—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    logger.set_context(update)
    message = update.message
    
    if not message or not message.is_topic_message or not ADMIN_CHAT_ID or message.chat_id != int(ADMIN_CHAT_ID):
        return

    thread_id = message.message_thread_id
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–æ–ø–∏–∫–∞—Ö
    system_topic_ids = {
        context.bot_data.get("dashboard_topic_id"),
        context.bot_data.get("l1_requests_topic_id"),
        context.bot_data.get("l2_support_topic_id"),
        context.bot_data.get("l3_billing_topic_id"),
    }
    if thread_id in system_topic_ids:
        return # –≠—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–æ–ø–∏–∫, –Ω–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏

    ticket_info = context.bot_data.get('topic_ticket_info', {}).get(thread_id)
    
    if ticket_info:
        user_id = ticket_info.get('user_id')
        entry_id = ticket_info.get('entry_id')
        
        if not user_id:
            log.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω user_id –¥–ª—è —Ç–æ–ø–∏–∫–∞ {thread_id}")
            return

        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –ö–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ–ª–æ –∫–∞–∫ –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞, –∞ –Ω–µ —Ñ–æ—Ä–≤–∞—Ä–¥
            await context.bot.copy_message(
                chat_id=user_id,
                from_chat_id=ADMIN_CHAT_ID,
                message_id=message.message_id
            )
            log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{entry_id}")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏—Ö–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
            # await message.reply_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", quote=False)
        except Exception as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)
            try:
                await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –û—à–∏–±–∫–∞: {e}", quote=True)
            except Exception as e_reply:
                log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç: {e_reply}")

async def check_sla_breaches(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    logger.set_context()
    log.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ SLA..." )
    breached_tickets = []
    open_tickets = await get_open_tickets_for_sla_check()
    now = datetime.now()

    for ticket in open_tickets:
        try:
            sla_time_str = ticket.get("SLA (–í—Ä–µ–º—è –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ)")
            if sla_time_str:
                sla_time = datetime.strptime(sla_time_str, "%H:%M:%S %d.%m.%Y")
                if now > sla_time:
                    breached_tickets.append(ticket)
        except (ValueError, TypeError) as e:
            logger.set_context()
            log.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ SLA –¥–ª—è –∑–∞—è–≤–∫–∏ #{ticket.get('–ù–æ–º–µ—Ä')}: {e}" )
            continue

    if not breached_tickets:
        log.info("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ." )
        return
    
    if breached_tickets:
        log.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:{len(breached_tickets)}")
    for ticket in breached_tickets:
        entry_id = ticket.get('–ù–æ–º–µ—Ä')
        logger.set_context()
        log.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ #{entry_id}" )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_lines = [
            f"‚ùóÔ∏è <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞!</b> ‚ùóÔ∏è",
            f"\n<b>–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> {html.escape(str(entry_id))}",
            f"<b>–û—Ç:</b> {html.escape(ticket.get('–§–ò–û'))}",
            f"<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {html.escape(ticket.get('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç'))}",
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {html.escape(ticket.get('–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è'))}",
            f"\n<b>–°—É—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n{html.escape(ticket.get('–°–æ–æ–±—â–µ–Ω–∏–µ'))}",
            f"\n<b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç—ã:</b>",
            f"  - –ü–æ–ª—É—á–µ–Ω–æ: {html.escape(ticket.get('–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è'))}",
            f"  - –í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É: {html.escape(ticket.get('–í—Ä–µ–º—è –≤–∑—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É', '–ù–µ—Ç'))}",
            f"  - –ü–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ 2 –ª–∏–Ω–∏—é: {html.escape(ticket.get('–ü–µ—Ä–µ–¥–∞—á–∞ –Ω–∞ 2 –ª–∏–Ω–∏—é', '–ù–µ—Ç'))}",
            f"  - –ü–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ 3 –ª–∏–Ω–∏—é: {html.escape(ticket.get('–ü–µ—Ä–µ–¥–∞—á–∞ –Ω–∞ 3 –õ–∏–Ω–∏—é', '–ù–µ—Ç'))}",
            f"\n<b>–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –ø–æ SLA:</b> {html.escape(ticket.get('SLA (–í—Ä–µ–º—è –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ)'))}"
        ]
        
        message = "\n".join(filter(None, message_lines))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if not SLA_NOTIFICATION_USER_IDS:
            logger.set_context()
            log.warning("SLA_NOTIFICATION_USER_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ." )
        else:
            for user_id in SLA_NOTIFICATION_USER_IDS:
                try:
                    await context.bot.send_message(chat_id=user_id, text=message, parse_mode='HTML')
                except Exception as e:
                    logger.set_context()
                    log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SLA-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}" )
            
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        await mark_sla_notification_sent(entry_id)
        log.info(f"–ó–∞—è–≤–∫–∞ ‚Ññ{entry_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω–∞—è")

async def delete_me(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    user_id = update.message.from_user.id
    logger.set_context(update)
    log.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    try:
        await delete_user(user_id)
        log.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
        await update.message.reply_text(
            "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã. "
            "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
    except Exception as e:
        logger.set_context(update)
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True )
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )

async def setup_admin_group_topics(application: Application) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –∏/–∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤."""
    bot = application.bot
    logger.set_context()
    log.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–ø–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...")

    if not ADMIN_CHAT_ID:
        log.warning("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤.")
        return

    try:
        chat_info = await bot.get_chat(ADMIN_CHAT_ID)
        if not chat_info.is_forum:
            log.error(f"–ß–∞—Ç {ADMIN_CHAT_ID} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫–∏.")
            return
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ {ADMIN_CHAT_ID}: {e}")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –∏–∑ –ë–î
    existing_topics = await get_all_topic_ids()
    application.bot_data.update(existing_topics)
    log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã ID —Ç–æ–ø–∏–∫–æ–≤ –∏–∑ –ë–î: {existing_topics}")

    missing_topics = False
    for key, name in TOPIC_NAMES.items():
        topic_key_in_db = f"{key}_topic_id"
        if topic_key_in_db not in existing_topics:
            missing_topics = True
            log.info(f"–¢–æ–ø–∏–∫ '{name}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è...")
            try:
                topic = await bot.create_forum_topic(chat_id=ADMIN_CHAT_ID, name=name)
                thread_id = topic.message_thread_id
                
                await set_topic_id(topic_key_in_db, thread_id)
                application.bot_data[topic_key_in_db] = thread_id
                log.info(f"–¢–æ–ø–∏–∫ '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å thread_id: {thread_id} –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î.")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è Dashboard –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
                if key == "dashboard":
                    message_to_pin = await bot.send_message(
                        chat_id=ADMIN_CHAT_ID,
                        message_thread_id=thread_id,
                        text="üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏. –ù–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∑–¥–µ—Å—å."
                    )
                    application.bot_data['dashboard_message_id'] = message_to_pin.message_id
                    await bot.pin_chat_message(
                        chat_id=ADMIN_CHAT_ID,
                        message_id=message_to_pin.message_id,
                        disable_notification=True
                    )
                    log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ Dashboard —Å–æ–∑–¥–∞–Ω–æ (ID: {message_to_pin.message_id}) –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ.")
                    
            except Exception as e:
                # –í–ª–æ–∂–µ–Ω–Ω—ã–π try-except –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞
                log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫ '{name}': {e}", exc_info=True)

    if not missing_topics:
        log.info("–í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

async def post_init_setup(application: Application) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ (–∫–æ–º–∞–Ω–¥—ã, —Ç–æ–ø–∏–∫–∏)."""
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
    user_commands = [
        BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
        BotCommand("new_ticket", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"),
        BotCommand("delete_me", "–£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ"),
    ]
    await application.bot.set_my_commands(user_commands)

    admin_commands = user_commands + [
        BotCommand("start_digest", "–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"),
        BotCommand("get_photo", "–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ ID"),
        BotCommand("recreate_topics", "–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–æ–ø–∏–∫–∏"),
    ]
    
    if ADMIN_USER_IDS:
        for admin_id in ADMIN_USER_IDS:
            try:
                await application.bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(admin_id))
            except Exception as e:
                logger.set_context()
                log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –∞–¥–º–∏–Ω–æ–≤
    await setup_admin_group_topics(application)
    # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
    await update_dashboard(application)

async def update_dashboard(application: Application) -> None:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ç–∞—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ-–¥–∞—à–±–æ—Ä–¥."""
    bot = application.bot
    bot_data = application.bot_data

    dashboard_topic_id = bot_data.get("dashboard_topic_id")
    dashboard_message_id = bot_data.get("dashboard_message_id")
    
    if not dashboard_topic_id or not dashboard_message_id or not ADMIN_CHAT_ID:
        log.warning("ID —Ç–æ–ø–∏–∫–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        return

    # 1. –°–æ–±–∏—Ä–∞–µ–º –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
    all_tickets = list(bot_data.get('topic_ticket_info', {}).values())
    
    new_tickets = [t for t in all_tickets if t.get('status') == 'new']
    l2_tickets = [t for t in all_tickets if t.get('status') == 'escalated_l2']
    l3_tickets = [t for t in all_tickets if t.get('status') == 'escalated_l3']
    
    in_progress_tickets = {}
    for ticket in all_tickets:
        if ticket.get('status') == 'in_progress':
            assignee = ticket.get('assignee', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')
            if assignee not in in_progress_tickets:
                in_progress_tickets[assignee] = []
            in_progress_tickets[assignee].append(ticket)

    # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞
    dashboard_lines = ["üìä <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏</b>\n"]
    chat_link = f"https://t.me/c/{str(ADMIN_CHAT_ID).replace('-100', '')}"

    # –°–µ–∫—Ü–∏—è: –ù–æ–≤—ã–µ —Ç–∏–∫–µ—Ç—ã
    dashboard_lines.append("<b>üì• –ù–æ–≤—ã–µ —Ç–∏–∫–µ—Ç—ã (L1):</b>")
    if not new_tickets:
        dashboard_lines.append("  <i>–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤</i>")
    else:
        for ticket in sorted(new_tickets, key=lambda x: int(x['entry_id'])):
            ticket_url = f"{chat_link}/{ticket['topic_id']}"
            user_info = f"@{ticket['username']}" if ticket['username'] else ticket['fio']
            dashboard_lines.append(f"  - <a href='{ticket_url}'>–¢–∏–∫–µ—Ç #{ticket['entry_id']}</a> ({html.escape(ticket.get('feedback_type', ''))}) –æ—Ç {html.escape(user_info)}")
    dashboard_lines.append("")

    # –°–µ–∫—Ü–∏—è: –¢–∏–∫–µ—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ
    dashboard_lines.append("<b>‚öôÔ∏è –¢–∏–∫–µ—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ:</b>")
    if not in_progress_tickets:
        dashboard_lines.append("  <i>–ù–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ</i>")
    else:
        for admin in sorted(in_progress_tickets.keys()):
            dashboard_lines.append(f"  - <b>–û–ø–µ—Ä–∞—Ç–æ—Ä: {html.escape(admin)}</b>")
            for ticket in sorted(in_progress_tickets[admin], key=lambda x: int(x['entry_id'])):
                ticket_url = f"{chat_link}/{ticket['topic_id']}"
                dashboard_lines.append(f"    - <a href='{ticket_url}'>–¢–∏–∫–µ—Ç #{ticket['entry_id']}</a> ({html.escape(ticket.get('feedback_type', ''))})")
    dashboard_lines.append("")
    
    # –°–µ–∫—Ü–∏—è: L2
    dashboard_lines.append("<b>üõ†Ô∏è –≠—Å–∫–∞–ª–∞—Ü–∏—è (L2):</b>")
    if not l2_tickets:
        dashboard_lines.append("  <i>–ù–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤</i>")
    else:
        for ticket in sorted(l2_tickets, key=lambda x: int(x['entry_id'])):
            ticket_url = f"{chat_link}/{ticket['topic_id']}"
            dashboard_lines.append(f"  - <a href='{ticket_url}'>–¢–∏–∫–µ—Ç #{ticket['entry_id']}</a>")
    dashboard_lines.append("")
    
    # –°–µ–∫—Ü–∏—è: L3
    dashboard_lines.append("<b>üí∞ –≠—Å–∫–∞–ª–∞—Ü–∏—è (L3):</b>")
    if not l3_tickets:
        dashboard_lines.append("  <i>–ù–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤</i>")
    else:
        for ticket in sorted(l3_tickets, key=lambda x: int(x['entry_id'])):
            ticket_url = f"{chat_link}/{ticket['topic_id']}"
            dashboard_lines.append(f"  - <a href='{ticket_url}'>–¢–∏–∫–µ—Ç #{ticket['entry_id']}</a>")
    
    dashboard_text = "\n".join(dashboard_lines)

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await bot.edit_message_text(
            text=dashboard_text,
            chat_id=ADMIN_CHAT_ID,
            message_id=dashboard_message_id,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—à–±–æ—Ä–¥: {e}", exc_info=True)

async def main() -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    logger.set_context()
    log.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    # –°–Ω–∞—á–∞–ª–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    try:
        await initialize_db()
        log.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        log.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        return

    # ApplicationBuilder —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç JobQueue
    application = (
        Application.builder()
        .token(token)
        .post_init(post_init_setup)
        .connect_timeout(30)
        .read_timeout(30)
        .write_timeout(30)
        .build()
    )

    # –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registration_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            REG_AWAITING_FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_fio)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )
    log.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω")

    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & filters.Regex("^üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ$"), start_new_ticket),
            CommandHandler("new_ticket", start_new_ticket)
        ],
        states={
            CHOOSING: [
                CallbackQueryHandler(button, pattern="^(bug|feature|access_issue|consultation)$"),
            ],
            PLATFORM: [
                CallbackQueryHandler(handle_platform_selection, pattern="^platform_")
            ],
            FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_feedback_and_ask_for_photo)],
            AWAITING_PHOTO: [
                MessageHandler(filters.PHOTO, handle_photo),
                CallbackQueryHandler(skip_photo_and_save, pattern="^skip_photo$"),
                CallbackQueryHandler(finish_photos_and_save, pattern="^finish_photos$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )
    log.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω")

    digest_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start_digest", start_digest)],
        states={
            CHOOSING_DIGEST_CONTENT: [
                CallbackQueryHandler(choose_content_type, pattern="^(add_text|add_photo|add_document|preview_and_send)$")
            ],
            AWAITING_DIGEST_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND | filters.Document.ALL | filters.PHOTO, receive_text)],
            AWAITING_PHOTO: [
                MessageHandler(filters.PHOTO | filters.TEXT & ~filters.COMMAND | filters.Document.ALL , handle_photo),
                CallbackQueryHandler(digest_media_save, pattern="^finish_photos$")
            ],
            AWAITING_DIGEST_DOCUMENT: [
                MessageHandler(filters.TEXT | filters.PHOTO | filters.Document.ALL & ~filters.COMMAND, handle_document), # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                CallbackQueryHandler(digest_document_save, pattern="^finish_documents$") # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
            ],
            CONFIRM_DIGEST: [
                CallbackQueryHandler(handle_broadcast_confirmation, pattern="^(confirm_broadcast|cancel_broadcast|add_something_to_digest)$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_digest_creation)]
    )
    log.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω")

    application.add_handler(registration_handler)
    application.add_handler(conv_handler)
    application.add_handler(digest_conv_handler)
    application.add_handler(CommandHandler("get_photo", get_photo_by_id))
    application.add_handler(CommandHandler("delete_me", delete_me))
    application.add_handler(CommandHandler("recreate_topics", recreate_topics))
    application.add_handler(CallbackQueryHandler(take_ticket, pattern="^take_ticket_"))
    application.add_handler(CallbackQueryHandler(take_escalated_ticket, pattern="^take_escalated_"))
    application.add_handler(CallbackQueryHandler(transfer_to_line, pattern="^transfer_l[23]_"))
    application.add_handler(CallbackQueryHandler(set_priority, pattern="^priority_"))
    application.add_handler(CallbackQueryHandler(close_ticket, pattern="^close_ticket_"))
    application.add_handler(MessageHandler(
        filters.ChatType.GROUPS & filters.TEXT & ~filters.COMMAND,
        handle_admin_reply
    ))
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,
        unhandled_text
    ))
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É SLA
    application.job_queue.run_repeating(check_sla_breaches, interval=900, first=10)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –¥–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    log.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    
    async with application:
        await application.start()
        await application.updater.start_polling()
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –∂–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Ctrl+C)
        await asyncio.Event().wait()

async def recreate_topics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–æ–ø–∏–∫–∏."""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    log.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤.")
    await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")

    try:
        # 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ —Ç–æ–ø–∏–∫–∞—Ö –∏–∑ –ë–î
        await delete_all_topics()
        log.info("–í—Å–µ –∑–∞–ø–∏—Å–∏ –æ —Ç–æ–ø–∏–∫–∞—Ö —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î.")

        # 2. –û—á–∏—â–∞–µ–º bot_data –æ—Ç —Å—Ç–∞—Ä—ã—Ö ID
        topic_keys_to_remove = list(TOPIC_NAMES.keys())
        topic_keys_to_remove.extend([f"{k}_topic_id" for k in TOPIC_NAMES.keys()])
        topic_keys_to_remove.append('dashboard_message_id')
        for key in topic_keys_to_remove:
            context.application.bot_data.pop(key, None)
        log.info("–î–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø–∏–∫–∞—Ö –≤ bot_data –æ—á–∏—â–µ–Ω—ã.")

        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ
        await setup_admin_group_topics(context.application)
        log.info("–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ setup_admin_group_topics –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        
        # 4. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await update_dashboard(context.application)
        log.info("–î–∞—à–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª–µ–Ω.")

        await update.message.reply_text("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ –∏ –¥—ç—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã!")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–æ–≤: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
